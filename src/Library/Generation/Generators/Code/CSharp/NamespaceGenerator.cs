using System;
using System.Collections.Generic;
using System.Linq;
using Atom.Data;

namespace Atom.Generation.Generators.Code.CSharp
{
    internal class NamespaceGenerator
    {
        public string Header()
        {
            return @"
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
";
        }

        public IEnumerable<string> DefaultNamespaces()
        {
            return new[] { "System", "System.Collections.Generic", "System.Linq", "System.Runtime.Serialization", "System.Threading.Tasks" };
        }

        public IEnumerable<string> StrongTypeNamespaces()
        {
            return new[] {
                "System.Data",
                "System.Reflection",
                "Newtonsoft.Json",
                "PF.Contrib.StrongTypes",
                "PF.Contrib.StrongTypes.Serialization",
                "PF.Contrib.StrongTypes.StrongTypes.Interfaces"
            };
        }

        public IEnumerable<string> Usings(IEnumerable<string> namespaces)
        {
            return namespaces.Select(n => string.Format("using {0};", n));
        }

        public string ByConfig(CSharpTargetConfig config)
        {
            var namespaces = GetNamespaces(config);

            return Header() + string.Join(Environment.NewLine, Usings(namespaces));
        }

        public IEnumerable<string> GetNamespaces(CSharpTargetConfig config)
        {
            var namespaces = DefaultNamespaces();

            if (config.Entities.StrongTypes)
            {
                namespaces = namespaces.Concat(StrongTypeNamespaces());
            }
            return namespaces;
        }
    }
}
